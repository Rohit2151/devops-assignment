name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1
  ECR_REPO: devops-assignment-repo
  PROJECT_NAME: devops-assignment
  SG_ID: sg-0a66ef779fd85bb32

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        run: |
          IMAGE_TAG=${GITHUB_SHA::8}
          ECR_URL=${{ steps.login-ecr.outputs.registry }}
          docker build -t $ECR_URL/${{ env.ECR_REPO }}:$IMAGE_TAG .
          docker push $ECR_URL/${{ env.ECR_REPO }}:$IMAGE_TAG
          echo "IMAGE=$ECR_URL/${{ env.ECR_REPO }}:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Get GitHub Runner Public IP
        run: echo "RUNNER_IP=$(curl -s https://checkip.amazonaws.com)" >> $GITHUB_ENV

      - name: Authorize GitHub Runner IP in Security Group
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ env.SG_ID }} \
            --protocol tcp --port 22 --cidr $RUNNER_IP/32 || true

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/prod.key
          chmod 600 ~/.ssh/prod.key
          cat >>~/.ssh/config <<END
          Host stage
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/prod.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          SSH_HOST: ${{ secrets.EC2_HOST }}

      - name: Deploy to EC2
        run: |
          ssh stage << EOF
            docker stop $PROJECT_NAME || true
            docker rm $PROJECT_NAME || true
            docker pull $IMAGE
            docker run -d --name $PROJECT_NAME -p 80:3000 $IMAGE
          EOF

      - name: Remove GitHub Runner IP from Security Group
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ env.SG_ID }} \
            --protocol tcp --port 22 --cidr $RUNNER_IP/32 || true
